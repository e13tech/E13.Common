parameters:
- name: name
  type: string
- name: project
  type: string

jobs:
- job: check${{ parameters.name }}
  steps:
  - pwsh: |
        git fetch
        git checkout --track -b main origin/main
        git pull
        git checkout --track -b deploy origin/deploy
        git pull
        git branch
        $files = git diff deploy...main --name-only

        Write-Host "Files from main needing to be deployed"
        $files
        
        Write-Host "##vso[task.setvariable variable=exists;isOutput=true]false"
        foreach($file in $files){
          Write-Host "Testing $file against src/${{ parameters.project }}"
          if($null -ne ("src/${{ parameters.project }}"| ? { $file.StartsWith($_) })){
            Write-Host Match $file
            Write-Host "##vso[task.setvariable variable=exists;isOutput=true]true"
            Write-Host "##vso[task.setvariable variable=createRelease;isOutput=true]true"
            break
          }
        }

    name: changes

- job: package${{ parameters.name }}
  dependsOn: check${{ parameters.name }}
  condition: eq(dependencies.check${{ parameters.name }}.outputs['changes.exists'], true)
  steps:
  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet '

  - task: UseDotNet@2
    displayName: 'Use .Net Core sdk 7.x'
    inputs:
      version: 7.x
      includePreviewVersions: true

  - pwsh: |
        $projects = dotnet list $(Agent.BuildDirectory)/s/src/${{ parameters.project }}/${{ parameters.project }}.csproj reference
        $projects = dotnet list $(Agent.BuildDirectory)/s/src/${{ parameters.project }}/${{ parameters.project }}.csproj reference
        $projects = $projects | select-object -skip 2
        foreach($project in $projects){ 
            $start = $project.LastIndexOf('\') + 1
            $package = $project.Substring($start, $project.IndexOf('.csproj') - $start)
            dotnet remove $(Agent.BuildDirectory)/s/src/${{ parameters.project }}/${{ parameters.project }}.csproj reference $project
            dotnet add $(Agent.BuildDirectory)/s/src/${{ parameters.project }}/${{ parameters.project }}.csproj package $package
        }

    name: fix_references

  - task: DotNetCoreCLI@2
    displayName: dotnet Restore
    inputs:
      command: restore
      projects: '**/${{ parameters.project }}/*.csproj'

  - task: DotNetCoreCLI@2
    displayName: dotnet Build
    inputs:
      projects: '**/${{ parameters.project }}/*.csproj'
      arguments: '--configuration Release --no-restore'
            
  - task: DotNetCoreCLI@2
    displayName: dotnet Package
    inputs:
      command: 'pack'
      packagesToPack: '**/${{ parameters.project }}/*.csproj'
      versioningScheme: 'byBuildNumber'
      configuration: Release
      nobuild: true
  
  - task: NuGetCommand@2
    inputs:
      command: 'push'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/${{ parameters.project }}.*.nupkg'
      nuGetFeedType: 'external'
      publishFeedCredentials: 'nuget.org'
  
  - task: NuGetCommand@2
    inputs:
      command: 'push'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/${{ parameters.project }}.*.nupkg'
      nuGetFeedType: 'external'
      publishFeedCredentials: 'pkg.github.com'
      
#  - task: DotNetCoreCLI@2
#    inputs:
#      command: 'push'
#      packagesToPush: '$(Build.ArtifactStagingDirectory)/${{ parameters.project }}.*.nupkg'
#      nuGetFeedType: 'internal'
#      publishVstsFeed: '$(vstsfeed)'
